{
	"C++: Solution Header": {
		"scope": "cpp",
		"prefix": "cpp-header",
		"body": [
			"#pragma once",
			"",
			"#include \"utils/ISolution.hpp\"",
			"",
			"",
			"namespace Year2022::Day${1:DayNum} {",
			"\t",
			"\tusing Input = ${2:Input_t};",
			"\t",
			"\t",
			"\tclass Solution final : public IParseInputConst<const Input>",
			"\t\t\t\t\t\t\t\t\t\t\t //, public ISolutionWithInput<const Input&, ${3:Part1_t}, ${4:Part2_t}> {",
			"\t\t\t\t\t\t\t\t\t\t\t , public IPart1WithInput<const Input&, $3> {",
			"\tpublic:",
			"\t\tSolution();",
			"\t\t~Solution() = default;",
			"\t\t",
			"\t\t// IParseInputConst",
			"\t\tconst Input parseInput(const std::string& rawInput) const override;",
			"\t\t",
			"\t\t// ISolutionWithInput",
			"\t\t$3 part1(const Input& input) const override;",
			"\t\t//$4 part2(const Input& input) const override;",
			"\t\t",
			"\t\t// Public Methods",
			"\t\t",
			"\t\t",
			"\t\t// Member Variables",
			"\t\tconst std::filesystem::path mInputFilePath;",
			"\t};",
			"\t",
			"}",
			""
		],
		"description": "Template for the header file of solution classes"
	},

	"C++: Solution Implementation": {
		"scope": "cpp",
		"prefix": "cpp-implementation",
		"body": [
			"#include <sstream>",
			"#include \"solution.hpp\"",
			"",
			"",
			"using namespace Year2022::Day${1:DayNum};",
			"",
			"",
			"Solution::Solution()",
			"\t: mInputFilePath(std::filesystem::path(__FILE__).replace_filename(\"input.txt\")) {",
			"}",
			"",
			"",
			"const Input Solution::parseInput(const std::string& rawInput) const {",
			"\tstd::stringstream inputStream(rawInput);",
			"\tstd::string line;",
			"\tInput input;",
			"\t",
			"\twhile(std::getline(inputStream, line)) {",
			"\t\t// do something to parse the input here",
			"\t}",
			"\t",
			"\treturn input;",
			"}",
			"",
			"",
			"${2:Part1_t} Solution::part1(const Input& input) const {",
			"}",
			"",
			"",
			"//${3:Part2_t} Solution::part2(const Input& input) const {",
			"//}",
			""
		],
		"description": "Implementation of a solution class"
	},

	"C++: Solution Test Case": {
		"scope": "cpp",
		"prefix": "cpp-testcase",
		"body": [
			"#include <catch.hpp>",
			"#include \"solution.hpp\"",
			"#include \"utils/FileUtils.hpp\"",
			"",
			"",
			"using namespace Year2022::Day${1:DayNum};",
			"",
			"",
			"namespace Year2022::Day$1 {",
			"",
			"\tclass SolutionTests {",
			"\tpublic:",
			"\t\tSolutionTests()",
			"\t\t\t: mSolution(std::make_unique<Solution>())",
			"\t\t\t, mSampleRawInput(\"\\n\")",
			"\t\t\t, mActualRawInput(Utils::getFileContents(mSolution->mInputFilePath)) {",
			"\t\t}",
			"\t\t",
			"\t\tconst std::unique_ptr<Solution> mSolution;",
			"\t\tconst std::string mSampleRawInput;",
			"\t\tconst std::string mActualRawInput;",
			"\t};",
			"",
			"}",
			"",
			"",
			"TEST_CASE_METHOD(SolutionTests, \"Year2022::Day$1::Solution::parseInput\", \"[Year2022][Day$1][parseInput]\")",
			"{",
			"\tGIVEN(\"Sample Raw Input\")",
			"\t{",
			"\t\tconst auto parsedInput = mSolution->parseInput(mSampleRawInput);",
			"\t\t",
			"\t\t// do some assertions on the input",
			"\t\t// REQUIRE( parseInput );",
			"\t}",
			"\t",
			"\tGIVEN(\"Actual Raw Input\")",
			"\t{",
			"\t\tconst auto parsedInput = mSolution->parseInput(mActualRawInput);",
			"\t\t",
			"\t\t// do some assertions on the input",
			"\t\t// REQUIRE( parseInput );",
			"\t}",
			"}",
			"",
			"",
			"TEST_CASE_METHOD(SolutionTests, \"Year2022::Day$1::Solution::part1\", \"[Year2022][Day$1][part1]\")",
			"{",
			"\tGIVEN(\"Sample Input\")",
			"\t{",
			"\t\tconst auto parsedInput = mSolution->parseInput(mSampleRawInput);",
			"\t\t",
			"\t\t// do some assertions on the output of part1",
			"\t\t// REQUIRE( mSolution->part1(parsedInput) );",
			"\t}",
			"\t",
			"\tGIVEN(\"Actual Input\")",
			"\t{",
			"\t\tconst auto parsedInput = mSolution->parseInput(mActualRawInput);",
			"\t\t",
			"\t\t// do some assertions on the output of part1",
			"\t\t// REQUIRE( mSolution->part1(parsedInput) );",
			"\t}",
			"}",
			"",
			"",
			"TEST_CASE_METHOD(SolutionTests, \"Year2022::Day$1::Solution::part2\", \"[Year2022][Day$1][part2]\")",
			"{",
			"\tGIVEN(\"Sample Input\")",
			"\t{",
			"\t\tconst auto parsedInput = mSolution->parseInput(mSampleRawInput);",
			"\t\t",
			"\t\t// do some assertions on the output of part2",
			"\t\t// REQUIRE( mSolution->part2(parsedInput) );",
			"\t}",
			"\t",
			"\tGIVEN(\"Actual input\")",
			"\t{",
			"\t\tconst auto parsedInput = mSolution->parseInput(mSampleRawInput);",
			"\t\t",
			"\t\t// do some assertions on the output of part2",
			"\t\t// REQUIRE( mSolution->part2(parsedInput) );",
			"\t}",
			"}",
			""
		],
		"description": "Catch2 test case for solution classes"
	},

	"C++: Print Solution Output": {
		"scope": "cpp",
		"prefix": "cpp-main",
		"body": [
			"// year 2022 day ${1:DayNum}",
			"{",
			"\tconst auto solution = std::make_unique<Year2022::Day$1::Solution>();",
			"\tconst auto rawInput = Utils::getFileContents(solution->mInputFilePath);",
			"\tconst auto parsedInput = solution->parseInput(rawInput);",
			"\tstd::cout << \"Year2022::Day$1::Solution->part1(): \" << solution->part1(parsedInput) << std::endl;",
			"\t//std::cout << \"Year2022::Day$1::Solution->part2(): \" << solution->part2(parsedInput) << std::endl;",
			"\tstd::cout << std::endl;",
			"}"
		]
	},

	"Python: Print Solution Output": {
		"scope": "python",
		"prefix": "py-main",
		"body": [
			"# Year 2021 Day ${1:DayNum}",
			"with open(day_$1.input_file_path, \"r\") as day_$1_input_file:",
			"\tday_$1_input = day_$1_input_file.readlines()",
			"day_$1_solution = day_$1.Solution(day_$1_input)",
			"print(\"Year 2021 Day $1\")",
			"day_$1_solution.main()",
			"print()"
		]
	}
}
